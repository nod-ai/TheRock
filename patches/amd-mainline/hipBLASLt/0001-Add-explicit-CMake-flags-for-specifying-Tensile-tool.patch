From b89f04dd6bf8b8d595e5575bbab12105be4d211f Mon Sep 17 00:00:00 2001
From: Stella Laurenzo <stellaraccident@gmail.com>
Date: Mon, 3 Feb 2025 18:04:51 -0800
Subject: [PATCH 1/3] Add explicit CMake flags for specifying Tensile toolchain
 components.

The legacy tensile settings are a mess of things using bare tool names and trying to use heuristics to find them on a variety of paths. All of this code needs to go.

However, as a starting point, I introduce new CMake flags:

* Tensile_HIP_CONFIG
* Tensile_CXX_COMPILER
* Tensile_C_COMPILER
* Tensile_OFFLOAD_BUNDLER
* Tensile_ASSEMBLER
* Tensile_TOOLCHAIN_FLAGS

Those that can be passed as arguments to TensileCreateLibrary are done that way. Unlike prior revisions, if any of the component names are absolute paths, it short circuits the auto-detection heuristics and uses exactly what it was told. This is an essential characteristic for hermetic builds (I am building in an environment where the compiler is built hermetically and the build system needs to specify where the pieces are).

Note that there is some coupling here between gen_assembly.sh and TensileCreateLibrary which is unfortunate. The former must have its configuration passed by environment, so the CMake custom commands now do this properly. The latter would require a lot of plumbing to get access to Tensile_TOOLCHAIN_FLAGS and Tensile_CXX_COMPILER_LAUNCHER, so for the moment, those are pulled from the environment. A future refactor should add them as TensileCreateLibrary arguments explicitly and pass them through. There are just so many layers of loose arguments to get to _compileSourceObjectFile that I opted for doing this in two steps (it would be a substantial improvement if the toolchain options were passed around as an object vs as half a dozen independent variables).
---
 CMakeLists.txt                                |  8 ++-
 .../src/kernels/CompileSourceKernel.cmake     | 12 +++-
 .../src/kernels/compile_code_object.sh        |  5 +-
 .../Tensile/BuildCommands/SourceCommands.py   |  5 +-
 tensilelite/Tensile/Ops/gen_assembly.sh       |  2 +-
 tensilelite/Tensile/TensileCreateLibrary.py   |  3 +-
 tensilelite/Tensile/Utilities/Toolchain.py    |  7 ++-
 tensilelite/Tensile/cmake/TensileConfig.cmake | 62 +++++++++++++++++--
 8 files changed, 88 insertions(+), 16 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8f4f5bce..2a16e5cf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -196,9 +196,15 @@ else()
 
     set( Tensile_LOGIC "asm_full" CACHE STRING "Tensile to use which logic?")
     set( Tensile_CODE_OBJECT_VERSION "default" CACHE STRING "Tensile code_object_version")
-    set( Tensile_COMPILER "amdclang++" CACHE STRING "Tensile compiler")
+    set( Tensile_COMPILER "amdclang++" CACHE STRING "Tensile compiler (legacy setting: see Tensile_CXX_COMPILER)")
     set( Tensile_LIBRARY_FORMAT "msgpack" CACHE STRING "Tensile library format")
     set( Tensile_CPU_THREADS "" CACHE STRING "Number of threads for Tensile parallel build")
+    set( Tensile_HIP_CONFIG "" CACHE STRING "Explicit path to hipconfig")
+    set( Tensile_CXX_COMPILER "" CACHE STRING "Explicit path to tensile C++ compiler")
+    set( Tensile_C_COMPILER "" CACHE STRING "Explicit path to tensile C compiler")
+    set( Tensile_OFFLOAD_BUNDLER "" CACHE STRING "Path to clang-offload-bundler (or auto-detect)")
+    set( Tensile_ASSEMBLER "" CACHE STRING "Path to a rocm assembler driver (or auto-detect)")
+    set( Tensile_TOOLCHAIN_FLAGS "" CACHE STRING "Flags that must be passed to tensile-invoked compilers/assemblers")
 
     option( Tensile_MERGE_FILES "Tensile to merge kernels and solutions files?" ON )
     option( Tensile_SHORT_FILENAMES "Tensile to use short file names? Use if compiler complains they're too long." OFF )
diff --git a/library/src/amd_detail/rocblaslt/src/kernels/CompileSourceKernel.cmake b/library/src/amd_detail/rocblaslt/src/kernels/CompileSourceKernel.cmake
index 13cf5bd2..67368a29 100644
--- a/library/src/amd_detail/rocblaslt/src/kernels/CompileSourceKernel.cmake
+++ b/library/src/amd_detail/rocblaslt/src/kernels/CompileSourceKernel.cmake
@@ -30,7 +30,13 @@ function(CompileSourceKernel source archs buildIdKind outputFolder)
     add_custom_target(MatrixTransformKernels ALL
                       DEPENDS ${outputFolder}/hipblasltTransform.hsaco
                       VERBATIM)
-    add_custom_command(OUTPUT ${outputFolder}/hipblasltTransform.hsaco
-                       COMMAND bash  ${CMAKE_CURRENT_SOURCE_DIR}/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh ${source} ${archs} ${CMAKE_BUILD_TYPE} ${buildIdKind} ${outputFolder}/hipblasltTransform.hsaco
-                       COMMENT "Compiling source kernels")
+    add_custom_command(
+        OUTPUT ${outputFolder}/hipblasltTransform.hsaco
+        COMMAND
+            # See script for environment variables it uses.
+            ${CMAKE_COMMAND} -E env
+                "Tensile_CXX_COMPILER=${Tensile_CXX_COMPILER}"
+                "Tensile_TOOLCHAIN_FLAGS=${Tensile_TOOLCHAIN_FLAGS}"
+                bash ${CMAKE_CURRENT_SOURCE_DIR}/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh ${source} ${archs} ${CMAKE_BUILD_TYPE} ${buildIdKind} ${outputFolder}/hipblasltTransform.hsaco
+        COMMENT "Compiling source kernels")
 endfunction()
\ No newline at end of file
diff --git a/library/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh b/library/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh
index 4ff71ea0..af989e79 100644
--- a/library/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh
+++ b/library/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh
@@ -34,5 +34,6 @@ elif [ "$build_type" = "Debug" ]; then
 fi
 
 rocm_path="${ROCM_PATH:-/opt/rocm}"
-clang_path="${rocm_path}/bin/amdclang++"
-$clang_path -x hip "$sources" --offload-arch="${archs}" -c --offload-device-only -Xoffload-linker --build-id=$build_id_kind $additional_options -o "$dest"
\ No newline at end of file
+clang_path="${Tensile_CXX_COMPILER:-${rocm_path}/bin/amdclang++}"
+clang_flags="${Tensile_TOOLCHAIN_FLAGS:-}"
+$clang_path ${clang_flags} -x hip "$sources" --offload-arch="${archs}" -c --offload-device-only -Xoffload-linker --build-id=$build_id_kind $additional_options -o "$dest"
\ No newline at end of file
diff --git a/tensilelite/Tensile/BuildCommands/SourceCommands.py b/tensilelite/Tensile/BuildCommands/SourceCommands.py
index 0b1ed01d..0381cb03 100644
--- a/tensilelite/Tensile/BuildCommands/SourceCommands.py
+++ b/tensilelite/Tensile/BuildCommands/SourceCommands.py
@@ -24,6 +24,8 @@ def _compileSourceObjectFile(cmdlineArchs: List[str], cxxCompiler: str, cxxSrcPa
     Raises:
         RuntimeError: If the compilation command fails.
     """
+    # TODO: Consider getting this from arguments vs from environment.
+    toolchain_flags = shlex.split(os.environ.get('Tensile_TOOLCHAIN_FLAGS', ''))
     archFlags = ['--offload-arch=' + arch for arch in cmdlineArchs]
 
     #TODO(@jichangjichang) Needs to be fixed when Maneesh's change is made available
@@ -40,12 +42,13 @@ def _compileSourceObjectFile(cmdlineArchs: List[str], cxxCompiler: str, cxxSrcPa
     if globalParameters["SaveTemps"]:
       hipFlags.append('--save-temps')
 
+    # TODO: Consider getting this from arguments vs from environment.
     launcher = shlex.split(os.environ.get('Tensile_CXX_COMPILER_LAUNCHER', ''))
 
     if os.name == "nt":
       hipFlags.extend(['-fms-extensions', '-fms-compatibility', '-fPIC', '-Wno-deprecated-declarations'])
 
-    args = launcher + [which(cxxCompiler)] + hipFlags + archFlags + [cxxSrcPath, '-c', '-o', objDestPath]
+    args = launcher + [which(cxxCompiler)] + toolchain_flags + hipFlags + archFlags + [cxxSrcPath, '-c', '-o', objDestPath]
 
     try:
       out = subprocess.check_output(args, stderr=subprocess.STDOUT)
diff --git a/tensilelite/Tensile/Ops/gen_assembly.sh b/tensilelite/Tensile/Ops/gen_assembly.sh
index 160d708f..99052e23 100755
--- a/tensilelite/Tensile/Ops/gen_assembly.sh
+++ b/tensilelite/Tensile/Ops/gen_assembly.sh
@@ -33,7 +33,7 @@ if ! [ -z ${ROCM_PATH+x} ]; then
     rocm_path=${ROCM_PATH}
 fi
 
-toolchain=${rocm_path}/bin/amdclang++
+toolchain="${Tensile_ASSEMBLER:-${rocm_path}/llvm/bin/clang++}"
 
 . ${venv}/bin/activate
 
diff --git a/tensilelite/Tensile/TensileCreateLibrary.py b/tensilelite/Tensile/TensileCreateLibrary.py
index 5421c99b..64f45361 100644
--- a/tensilelite/Tensile/TensileCreateLibrary.py
+++ b/tensilelite/Tensile/TensileCreateLibrary.py
@@ -514,6 +514,7 @@ def TensileCreateLibrary():
   argParser.add_argument("LogicPath",       help="Path to LibraryLogic.yaml files.")
   argParser.add_argument("OutputPath",      help="Where to write library files?")
   argParser.add_argument("RuntimeLanguage", help="Which runtime language?", choices=["OCL", "HIP", "HSA"])
+  argParser.add_argument("--hip-config",              dest="HIPConfig",         action="store", default=ToolchainDefaults.HIP_CONFIG)
   argParser.add_argument("--cxx-compiler",           dest="CxxCompiler",       action="store", default=ToolchainDefaults.CXX_COMPILER,
                          help=f"Default: {ToolchainDefaults.CXX_COMPILER}")
   argParser.add_argument("--c-compiler",             dest="CCompiler",         action="store", default=ToolchainDefaults.C_COMPILER)
@@ -616,7 +617,7 @@ def TensileCreateLibrary():
     arguments[key] = value
 
   cxxCompiler, cCompiler, offloadBundler, assembler, hipconfig = validateToolchain(
-      args.CxxCompiler, args.CCompiler, args.OffloadBundler, args.Assembler, ToolchainDefaults.HIP_CONFIG
+      args.CxxCompiler, args.CCompiler, args.OffloadBundler, args.Assembler, args.HIPConfig
   )
   print1(f"# HIP Version:         {getVersion(hipconfig, regex=r'(.+)')}")
   print1(f"# Cxx Compiler:        {cxxCompiler} (version {getVersion(cxxCompiler)})")
diff --git a/tensilelite/Tensile/Utilities/Toolchain.py b/tensilelite/Tensile/Utilities/Toolchain.py
index 6158bd52..9e91ac1b 100644
--- a/tensilelite/Tensile/Utilities/Toolchain.py
+++ b/tensilelite/Tensile/Utilities/Toolchain.py
@@ -43,6 +43,12 @@ class ToolchainDefaults(NamedTuple):
 
 
 def _supportedComponent(component: str, targets: List[str]) -> bool:
+    # If an absolute path was specified for any component, accept it and assume
+    # the user meant what they said.
+    if Path(component).absolute:
+        return True
+    # Otherwise, validate it against some assumptions about what an unadorned
+    # executable name should be on various platforms.
     isSupported = any([component == t for t in targets]) or any([Path(component).name == t for t in targets])
     return isSupported
 
@@ -123,7 +129,6 @@ def _validateExecutable(file: str, searchPaths: List[Path]) -> str:
         supportedCxxCompiler(file), supportedCCompiler(file), supportedOffloadBundler(file), supportedHip(file)
     )):
         raise ValueError(f"{file} is not a supported toolchain component for OS: {os.name}")
-
     if _exeExists(Path(file)): return file
     for path in searchPaths:
         path /= file 
diff --git a/tensilelite/Tensile/cmake/TensileConfig.cmake b/tensilelite/Tensile/cmake/TensileConfig.cmake
index 76277806..fc216df8 100644
--- a/tensilelite/Tensile/cmake/TensileConfig.cmake
+++ b/tensilelite/Tensile/cmake/TensileConfig.cmake
@@ -72,6 +72,31 @@ endif()
 add_subdirectory("${Tensile_ROOT}/Source" "Tensile")
 include("${Tensile_ROOT}/Source/TensileCreateLibrary.cmake")
 
+# Gets a command line fragment that can be prepended to a command in order to
+# setup toolchain environment variables in a child process.
+# Generally, each of these should be promoted to flags at some point, and then
+# they should be removed from here.
+function(TensileGetEnvCommand out_var)
+  set(CommandEnv ${CMAKE_COMMAND} -E env)
+  if(Tensile_CXX_COMPILER)
+    list(APPEND CommandEnv "Tensile_CXX_COMPILER=${Tensile_CXX_COMPILER}")
+  endif()
+  if(Tensile_C_COMPILER)
+    list(APPEND CommandEnv "Tensile_C_COMPILER=${Tensile_C_COMPILER}")
+  endif()
+  if(Tensile_ASSEMBLER)
+    list(APPEND CommandEnv "Tensile_ASSEMBLER=${Tensile_ASSEMBLER}")
+  endif()
+  if(CMAKE_CXX_COMPILER_LAUNCHER)
+    list(APPEND "Tensile_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}")
+  endif()
+  if(Tensile_TOOLCHAIN_FLAGS)
+    list(APPEND CommandEnv "Tensile_TOOLCHAIN_FLAGS=${Tensile_TOOLCHAIN_FLAGS}")
+  endif()
+  list(APPEND CommandEnv "--")
+  set("${out_var}" "${CommandEnv}" PARENT_SCOPE)
+endfunction()
+
 # Output target: ${Tensile_VAR_PREFIX}_LIBRARY_TARGET. Ensures that the libs get built in Tensile_OUTPUT_PATH/library.
 function(TensileCreateLibraryFiles
          Tensile_LOGIC_PATH
@@ -197,12 +222,35 @@ function(TensileCreateLibraryFiles
     set(Options ${Options} "--code-object-version=${Tensile_CODE_OBJECT_VERSION}")
   endif()
 
-  if(Tensile_COMPILER)
-    set(Options ${Options} "--cxx-compiler=${Tensile_COMPILER}")
+  if(Tensile_CXX_COMPILER)
+    set(Options ${Options} "--cxx-compiler=${Tensile_CXX_COMPILER}")
+    # Legacy: Tensile used to separate the CXX compiler path and called it
+    # "cmake-cxx-compiler".
+    set(Options ${Options} "--cmake-cxx-compiler=${Tensile_CXX_COMPILER}")
+  else()
+    # Old-style, non path based compiler flags.
+    if(Tensile_COMPILER)
+      set(Options ${Options} "--cxx-compiler=${Tensile_COMPILER}")
+    endif()
+    if(Tensile_COMPILER_PATH)
+      set(Options ${Options} "--cmake-cxx-compiler=${Tensile_COMPILER_PATH}")
+    endif()
+  endif()
+
+  if(Tensile_C_COMPILER)
+    set(Options ${Options} "--c-compiler=${Tensile_C_COMPILER}")
+  endif()
+
+  if(Tensile_HIP_CONFIG)
+    set(Options ${Options} "--hip-config=${Tensile_HIP_CONFIG}")
+  endif()
+
+  if(Tensile_ASSEMBLER)
+    set(Options ${Options} "--assembler=${Tensile_ASSEMBLER}")
   endif()
 
-  if(Tensile_COMPILER_PATH)
-    set(Options ${Options} "--cmake-cxx-compiler=${Tensile_COMPILER_PATH}")
+  if(Tensile_OFFLOAD_BUNDLER)
+    set(Options ${Options} "--offload-bundler=${Tensile_OFFLOAD_BUNDLER}")
   endif()
 
   if(Tensile_CPU_THREADS)
@@ -234,7 +282,8 @@ function(TensileCreateLibraryFiles
     set(Options ${Options} "--build-id=${Tensile_BUILD_ID}")
   endif()
 
-  set(CommandLine ${VIRTUALENV_BIN_DIR}/${VIRTUALENV_PYTHON_EXENAME} ${Script} ${Options} ${Tensile_LOGIC_PATH} ${Tensile_OUTPUT_PATH} HIP)
+  TensileGetEnvCommand(CommandEnv)
+  set(CommandLine ${CommandEnv} ${VIRTUALENV_BIN_DIR}/${VIRTUALENV_PYTHON_EXENAME} ${Script} ${Options} ${Tensile_LOGIC_PATH} ${Tensile_OUTPUT_PATH} HIP)
   message(STATUS "Tensile_CREATE_COMMAND: ${CommandLine}")
 
   if(Tensile_EMBED_LIBRARY)
@@ -293,6 +342,7 @@ function(TensileCreateExtOpLibraries OutputFolder ArchStr)
   set(ext_op_library_path ${build_tmp_dir}/hipblasltExtOpLibrary.dat)
   file(REMOVE ${ext_op_library_path})
 
+  TensileGetEnvCommand(CommandEnv)
   add_custom_command(
     OUTPUT ${OutputFolder}/hipblasltExtOpLibrary.dat
     WORKING_DIRECTORY "${cwd}"
@@ -300,7 +350,7 @@ function(TensileCreateExtOpLibraries OutputFolder ArchStr)
     COMMAND ${CMAKE_COMMAND} -E rm -rf ${build_tmp_dir}
     COMMAND ${CMAKE_COMMAND} -E make_directory ${build_tmp_dir}
     COMMAND ${CMAKE_COMMAND} -E make_directory ${OutputFolder}
-    COMMAND bash "${script}" "\"${Archs}\"" "${build_tmp_dir}" "${VIRTUALENV_HOME_DIR}" "${Tensile_BUILD_ID}"
+    COMMAND ${CommandEnv} bash "${script}" "\"${Archs}\"" "${build_tmp_dir}" "${VIRTUALENV_HOME_DIR}" "${Tensile_BUILD_ID}"
     COMMAND ${CMAKE_COMMAND} -E copy ${ext_op_library_path} ${build_tmp_dir}/extop_*.co ${OutputFolder}
   )
 
-- 
2.34.1

